
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
    reportsDirectory = file("${layout.buildDirectory.get()}/reports/coverage")
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

/**
 * Task that generates JaCoCo (code coverage) report for Unit Tests, and combines the results
 * with any coverage reports for the Instrumented Tests, resulting in one unified code coverage
 * report.
 *
 * Works for Java and/or Kotlin projects.
 */
task jacocoCombinedTestReports(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Verification"
    description = "Creates JaCoCo test coverage report for Unit and Instrumented Tests (combined) on the Debug build"
    reports {
        xml.required = true
        html.required = true
    }

    // Files to exclude:
    // Generated classes, platform classes, etc.
    def excludes = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                    '**/*$ViewInjector*.*', '**/*$ViewBinder*.*', '**/*$ViewBinding*.*',
                    '**/android/databinding/*Binding*.*', '**/android/databinding/*BindingImpl*.*',
                    '**/androidx/databinding/*Binding*.*', '**/androidx/databinding/*BindingImpl*.*',
                    '**/*$Lambda$*.*', '**/*Lambda$*.*', '**/*$1*.*', '**/*$2*.*', '**/*$3*.*',
                    '**/*$4*.*', '**/*$5*.*', '**/*$6*.*', '**/*$7*.*', '**/*$8*.*', '**/*$9*.*']
    def javaClass = fileTree(
            dir: "${layout.buildDirectory.get()}/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
            excludes: excludes
    )
    def kotlinClass = fileTree(
            dir: "${layout.buildDirectory.get()}/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // generated classes
    classDirectories = (files(javaClass,kotlinClass))
    def javaSrc = file("${project.projectDir}/src/main/java")
    def kotlinSrc = file("${project.projectDir}/src/main/kotlin")
    // sources
    sourceDirectories = (files(javaSrc,kotlinSrc))
    // Output and existing data
    // Combine Unit test and Instrumented test reports
    executionData.from = (fileTree(dir: "${layout.buildDirectory.get()}", includes: [
            // Unit tests coverage data
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            // Instrumented tests coverage data
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ]))
}

android {
    namespace "caffeinatedandroid.demomergecoverage"
    compileSdk 34

    defaultConfig {
        applicationId "caffeinatedandroid.demomergecoverage"
        minSdkVersion 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}